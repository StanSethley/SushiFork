plugins {
    id 'java'
}

group = 'mcsushi.dynamicshop'
version = 'Beta 0.5.3'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            exclude '**/premium/**'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    premium {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

task buildFree(type: Jar) {
    from sourceSets.main.output
    archiveFileName = "SushiDynamicShop-${version}.jar"
    group = "build"
}

task buildPremium(type: Jar) {
    from sourceSets.premium.output
    from { zipTree("libs/HikariCP-6.3.0.jar") }
    archiveFileName = "SushiDynamicShop-Premium-${version}.jar"
    group = "build"
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

buildPremium.dependsOn compileJava

repositories {
    mavenCentral()
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://nexus.phoenixdevt.fr/repository/maven-public/' }
    maven { url = 'https://maven.devs.beer/' }
    maven { url = 'https://repo.rosewooddev.io/repository/public/' }
    maven { url = 'https://repo.nexomc.com/releases' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.6-R0.1-SNAPSHOT'
    compileOnly('com.github.MilkBowl:VaultAPI:1.7') {
        exclude group: 'org.bukkit', module: 'bukkit'
    }
    compileOnly 'net.Indyuce:MMOItems-API:6.10.1-SNAPSHOT'
    compileOnly 'io.lumine:MythicLib-dist:1.7.1-SNAPSHOT'
    compileOnly 'dev.lone:api-itemsadder:4.0.9'
    compileOnly 'org.black_ixx:playerpoints:3.3.2'
    compileOnly 'com.nexomc:nexo:1.5.0'
    implementation 'com.zaxxer:HikariCP:6.3.0'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

tasks.withType(JavaCompile).configureEach {
    doFirst {
        def rawVersion = System.getProperty("java.version")
        def majorVersion = rawVersion.tokenize(".")[0].toInteger()
        if (majorVersion < 21) {
            throw new GradleException("❌ Java 21 or newer is required. Current: ${rawVersion}")
        } else {
            println "✅ Java version verified: ${rawVersion} (OK)"
        }
    }
    options.encoding = 'UTF-8'
}
